'use strict'

const MongoClient = require('mongodb').MongoClient
const { promisify } = require('util')
const promisifiedConnect = promisify(MongoClient.connect)

const Nodessh = require('node-ssh')
const ssh = new Nodessh()
const ejson = require('ejson')
const urlParser = require('url')
const debug = require('debug')('mojoin:MongoDb')

const Datasource = require('./datasource')

/**
 * MongoDb - Datasource
 */
class MongoDb extends Datasource {
  /**
   * Generates the query object for a mongodb query
   *
   * @param {object} options
   * @param {date} options.modifiedAfter
   * @returns {object} mongodbQueryObject
   */
  buildQueryObject ({ modifiedAfter }) {
    const queryObject = {}

    queryObject[this.modifiedField] = modifiedAfter
      ? { $gt: modifiedAfter }
      : undefined

    return queryObject
  }

  /**
   * Queries a mongodb datasource via the mongodb protocol
   *
   * @param {object} options
   * @param {date} options.modifiedAfter
   * @param {number} options.offset
   * @returns {array} docs - query result as js array
   */
  async queryOverMongodb ({ modifiedAfter, offset }) {
    const connectionData = this.location.match(/(.*)\/(.*)\/(.*)$/)
    const url = connectionData[1]
    const dbName = connectionData[2]
    const collectionName = connectionData[3]

    // TODO: mongoDb lib supports promises out of the box: change to that behaviour
    try {
      const client = await promisifiedConnect(url, { useNewUrlParser: true })
      debug('Established Mongodb connection to %s', this.location)

      const db = client.db(dbName)
      const collection = db.collection(collectionName)

      const docs = await collection
        .find(this.buildQueryObject({ modifiedAfter }))
        .limit(this.paginationPageSize)
        .skip(offset)
        .toArray()

      const jsonDocs = JSON.parse(JSON.stringify(docs))
      client.close()
      return jsonDocs
    } catch (e) {
      debug('Error query mongodb: %s', e.message)
      throw e
    }
  }

  /**
   * Generates the ssh options to be used for node-ssh
   *
   * @param {object} urlObject - object generated by destructiuring a url with the url module nodeJs provides
   * @param {string} urlObject.auth - url authorisation string
   * @param {string} urlObject.host - url host
   * @returns {object} sshConnectOptions - options object to feed into node-ssh module
   */
  buildSshOptions ({ auth, host }) {
    const username = auth.split(':')[0]
    const password = auth.split(':')[1]

    let sshConnectOptions = {
      host: host,
      username: username
    }
    if (this.privateSshKey) sshConnectOptions.privateKey = this.privateSshKey
    if (password) sshConnectOptions.password = password

    return sshConnectOptions
  }

  /**
   * Generates a command to query the mongodb over a ssh connection
   *
   * @param {object} options
   * @param {number} options.offset - page to start from to collect data (default 0)
   * @param {date} options.modifiedAfter - query only after this date
   * @returns {string} mongoCommand
   */
  buildMongoSshCommand ({ modifiedAfter, offset }) {
    const connectionData = this.location.match(/(.*)\/(.*)\/(.*)$/)
    const dbName = connectionData[2]
    const collection = connectionData[3]

    const projection = {}
    const query = this.buildQueryObject({ modifiedAfter })

    const sortString = ''

    const limitString = this.paginationPageSize
      ? `.limit(${this.paginationPageSize})`
      : ''
    const offsetString = offset || offset === 0 ? `.skip(${offset})` : ''

    const mongoCommand = `mongo --quiet '${dbName}' --eval 'JSON.stringify(db.${collection}.find(${ejson.stringify(
      query
    )},${ejson.stringify(
      projection
    )})${sortString}${offsetString}${limitString}.toArray())'`

    return mongoCommand
  }

  /**
   * queries a mongodb datasource via the ssh protocol
   *
   * @param {object} options
   * @param {number} options.offset
   * @param {date} options.modifiedAfter
   * @returns {array} docs - query result as js array
   */
  async queryOverSsh ({ modifiedAfter, offset }) {
    const mongoCommand = this.buildMongoSshCommand({
      modifiedAfter,
      offset
    })

    const urlObject = urlParser.parse(this.location)
    const sshConnectOptions = this.buildSshOptions(urlObject)

    try {
      const connection = await ssh.connect(sshConnectOptions)
      debug(
        'Established SSH connection to %s',
        connection.connection.config.host
      )
      const result = await ssh.execCommand(mongoCommand)
      debug('Executed remote command: %s', mongoCommand)
      if (result.stderr) throw new Error(result.stderr)
      return JSON.parse(result.stdout)
    } catch (e) {
      debug('Error executing SSH command: %s', e.message)
      throw e
    }
  }

  /**
   * queries a mongodb datasource
   *
   * @param {object} options
   * @param {number} options.modifiedAfter
   * @param {number} options.offset
   * @returns {array} docs - query result as js array
   */
  async queryDatasource ({ modifiedAfter, offset } = {}) {
    if (this.location.startsWith('mongodb://')) {
      return this.queryOverMongodb({ modifiedAfter, offset })
    } else if (this.location.startsWith('ssh://')) {
      return this.queryOverSsh({ modifiedAfter, offset })
    } else {
      throw new Error(
        'MongoBD connection protocol not supportrd. Use: mongodb or ssh'
      )
    }
  }
}

module.exports = MongoDb
