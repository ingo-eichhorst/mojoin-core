'use strict'

const MongoClient = require('mongodb').MongoClient
const { promisify } = require('util')
const Nodessh = require('node-ssh')
const ssh = new Nodessh()
const ejson = require('ejson')
const urlParser = require('url')
const debug = require('debug')('mojoin:MongoDb')

const Datasource = require('./datasource')

/**
 * MongoDb - Datasource
 */
class MongoDb extends Datasource {
  /**
   * queries a mongodb datasource via the mongodb protocol
   *
   * @returns {array} docs - query result as js array
   */
  async queryOverMongodb () {
    const connectionData = this.location.match(/(.*)\/(.*)\/(.*)$/)
    const url = connectionData[1]
    const dbName = connectionData[2]
    const collectionName = connectionData[3]

    // TODO: mongoDb lib supports promises out of the box: change to that behaviour
    const promisifiedConnect = promisify(MongoClient.connect)
    const client = await promisifiedConnect(url)
    debug('Established Mongodb connection to %s', url)

    const db = client.db(dbName)
    const collection = db.collection(collectionName)

    const docs = await collection.find().toArray()

    client.close()
    return docs
  }

  /**
   * Generates the ssh options to be used for node-ssh
   *
   * @param {objsect} urlObject - object generated by destructiuring a url with the url module nodeJs provides
   * @returns {object} sshConnectOptions - options object to feed into node-ssh module
   */
  buildSshOptions (urlObject) {
    const username = urlObject.auth.split(':')[0]
    const password = urlObject.auth.split(':')[1]

    let sshConnectOptions = {
      host: urlObject.host,
      username: username
    }
    if (this.privateSshKey) sshConnectOptions.privateKey = this.privateSshKey
    if (password) sshConnectOptions.password = password

    return sshConnectOptions
  }

  /**
   * Generates a command to query the mongodb over a ssh connection
   *
   * @param {number} offset - page to start from to collect data (default 0)
   * @param {number} limit - entries per page (default unlimited)
   */
  buildMongoSshCommand (offset, limit) {
    const connectionData = this.location.match(/(.*)\/(.*)\/(.*)$/)
    const dbName = connectionData[2]
    const collection = connectionData[3]

    const projection = {}
    const query = {}
    const sortString = ''
    let limitString = ''
    let offsetString = ''
    // TODO: Limit and offset
    // if (offset) offsetString = `.skip(${offset})`
    // if (limit) limitString = `.limit(${limit})`

    const mongoCommand = `mongo --quiet '${dbName
    }' --eval 'JSON.stringify(db.${collection
    }.find(${ejson.stringify(query)
    },${ejson.stringify(projection)
    })${sortString}${offsetString}${limitString}.toArray())'`

    return mongoCommand
  }

  /**
   * queries a mongodb datasource via the ssh protocol
   *
   * @returns {array} docs - query result as js array
   */
  async queryOverSsh (offset = null, limit = null) {
    const mongoCommand = this.buildMongoSshCommand(offset, limit)

    const urlObject = urlParser.parse(this.location)
    const sshConnectOptions = this.buildSshOptions(urlObject)

    try {
      const connection = await ssh.connect(sshConnectOptions)
      debug('Established SSH connection to %s', connection.connection.config.host)
      const result = await ssh.execCommand(mongoCommand)
      debug('Executed remote command: %s', mongoCommand)
      if (result.stderr) throw new Error(result.stderr)
      return JSON.parse(result.stdout)
    } catch (e) {
      debug('Error executing SSH command: %s', e.message)
      throw e
    }
  }

  /**
   * queries a mongodb datasource
   *
   * @returns {array} docs - query result as js array
   */
  async queryDatasource () {
    if (this.location.startsWith('mongodb://')) return this.queryOverMongodb()
    else if (this.location.startsWith('ssh://')) return this.queryOverSsh()
    else throw new Error('MongoBD connection protocol not supportrd. Use: mongodb or ssh')
  }
}

module.exports = MongoDb
